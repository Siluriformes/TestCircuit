/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input sum,
    input carry,
    output reg a,
    output reg b,
    output reg c
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_seg_display_seg;
  wire [4-1:0] M_seg_display_sel;
  reg [16-1:0] M_seg_display_values;
  multi_seven_seg_2 seg_display (
    .clk(clk),
    .rst(rst),
    .values(M_seg_display_values),
    .seg(M_seg_display_seg),
    .sel(M_seg_display_sel)
  );
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  localparam IDLE_state = 4'd0;
  localparam TEST1_state = 4'd1;
  localparam TEST2_state = 4'd2;
  localparam TEST3_state = 4'd3;
  localparam TEST4_state = 4'd4;
  localparam TEST5_state = 4'd5;
  localparam TEST6_state = 4'd6;
  localparam TEST7_state = 4'd7;
  localparam TEST8_state = 4'd8;
  localparam ERROR_state = 4'd9;
  localparam END_state = 4'd10;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  
  localparam X = 5'h1b;
  
  wire [1-1:0] M_test_aout;
  wire [1-1:0] M_test_bout;
  wire [1-1:0] M_test_cout;
  wire [3-1:0] M_test_abc;
  reg [3-1:0] M_test_values;
  testcase_3 test (
    .values(M_test_values),
    .aout(M_test_aout),
    .bout(M_test_bout),
    .cout(M_test_cout),
    .abc(M_test_abc)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    io_led = 24'h000000;
    M_seg_display_values = 16'he0fa;
    M_test_values = 3'h0;
    io_seg = ~M_seg_display_seg;
    io_sel = ~M_seg_display_sel;
    a = M_test_aout;
    b = M_test_bout;
    c = M_test_cout;
    
    case (M_state_q)
      IDLE_state: begin
        M_counter_d = 1'h0;
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = TEST1_state;
        end
      end
      TEST1_state: begin
        M_test_values = 3'h0;
        M_seg_display_values = 16'h1000;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && sum == 1'h0 && carry == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = TEST2_state;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && (sum == 1'h1 || carry == 1'h1)) begin
            M_state_d = ERROR_state;
          end
        end
      end
      TEST2_state: begin
        M_test_values = 3'h1;
        M_seg_display_values = 16'h2001;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && sum == 1'h1 && carry == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = TEST3_state;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && (sum == 1'h0 || carry == 1'h1)) begin
            M_state_d = ERROR_state;
          end
        end
      end
      TEST3_state: begin
        M_test_values = 3'h2;
        M_seg_display_values = 16'h3010;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && sum == 1'h1 && carry == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = TEST4_state;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && (sum == 1'h0 || carry == 1'h1)) begin
            M_state_d = ERROR_state;
          end
        end
      end
      TEST4_state: begin
        M_test_values = 3'h3;
        M_seg_display_values = 16'h4011;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && sum == 1'h0 && carry == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = TEST5_state;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && (sum == 1'h1 || carry == 1'h0)) begin
            M_state_d = ERROR_state;
          end
        end
      end
      TEST5_state: begin
        M_test_values = 3'h4;
        M_seg_display_values = 16'h5100;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && sum == 1'h1 && carry == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = TEST6_state;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && (sum == 1'h0 || carry == 1'h1)) begin
            M_state_d = ERROR_state;
          end
        end
      end
      TEST6_state: begin
        M_test_values = 3'h5;
        M_seg_display_values = 16'h6101;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && sum == 1'h0 && carry == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = TEST7_state;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && (sum == 1'h1 || carry == 1'h0)) begin
            M_state_d = ERROR_state;
          end
        end
      end
      TEST7_state: begin
        M_test_values = 3'h6;
        M_seg_display_values = 16'h7110;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && sum == 1'h0 && carry == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = TEST8_state;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && (sum == 1'h1 || carry == 1'h0)) begin
            M_state_d = ERROR_state;
          end
        end
      end
      TEST8_state: begin
        M_test_values = 3'h7;
        M_seg_display_values = 16'h8111;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && sum == 1'h1 && carry == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = END_state;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && (sum == 1'h0 || carry == 1'h0)) begin
            M_state_d = ERROR_state;
          end
        end
      end
      ERROR_state: begin
        M_seg_display_values = 16'haccb;
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      END_state: begin
        M_seg_display_values = 16'h00da;
        if (io_button[1+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
